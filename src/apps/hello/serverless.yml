service: ${self:custom.global_vars.SERVICE_NAME}

custom:
  global_vars:
    PROJECT_NAME: ${env:BASE_NAME}
    SERVICE_NAME: ${env:SERVICE_PROFILE}

provider:
  name: google
  stage: dev
  runtime: ${env:ENV.GCP.NODE_RUNTIME}
  region: ${env:ENV.GCP.REGION}
  project: ${env:ENV.GCP.PROJECT_NAME}
  memorySize: 128
  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:
  # https://serverless.com/framework/docs/providers/google/guide/credentials/
  #
  # the path to the credentials file needs to be absolute
  credentials: ~/.gcloud/nomadic-charge-369511-562b8baf7484.json

frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-google-cloudfunctions
  - serverless-plugin-typescript

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  patterns:
    - '!node_modules/**'
    - '!package.json'
    - '!.gitignore'
    - '!.git/**'

functions:
  hello:
    handler: sayHello
    events:
      - http: path
  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless
  #second:
  #  handler: event
  #  events:
  #    - event:
  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish
  #        resource: projects/*/topics/my-topic
# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
#resources:
#  resources:
#    - type: storage.v1.bucket
#      name: my-serverless-service-bucket
#  imports:
#    - path: my_template.jinja
